{"version":3,"sources":["src/index.ts"],"names":[],"mappings":";AAgCA,SAAA,EAAA,GAAA,OAAA,EAAA,mBAAA,QAAA,iBAAA,OAAA,SAAA,SAAA,GAAA,cAAA,GAAA,SAAA,GAAA,OAAA,GAAA,mBAAA,QAAA,EAAA,cAAA,QAAA,IAAA,OAAA,UAAA,gBAAA,IAAA,GAhCA,IAAM,EAAY,SAAS,eAAe,aAEpC,EAAa,SAAU,EAAe,GACtC,QADsC,IAAA,IAAA,EAAA,KACrB,iBAAV,EACH,MAAA,IAAI,MAAM,mCAA0C,EAAA,IAGxD,IAAA,EAAc,EAEZ,EAAQ,KAAK,MAAM,GACnB,EAAU,EAAQ,EAEpB,GAAY,IAAZ,EACK,MAAA,GAAG,EAER,IAAA,EAAY,KAAK,MAAM,EAAU,GAEjC,GAAc,IAAd,EACK,KAAc,IAAd,GACL,GAA4B,EAC5B,EAAY,KAAK,MAAM,EAAU,QAG5B,KAAA,EAAY,GAAM,GACvB,GAAwB,EACxB,GAA4B,EAIzB,OAAC,EAAQ,EAAI,IAAI,EAAK,IAAM,KAAU,EAAS,IAAI,GAG5D,EAAU,QAAU,WACZ,IAAA,EAAQ,SAAS,eAAe,QAA8B,MAC9D,EAAS,SAAS,eAAe,UACpC,cACG,EAAS,SAAS,eAAe,UACpC,cACG,EAAgB,SAAS,eAC7B,iBACqB,cACjB,EAAe,SAAS,eAC5B,gBACqB,cACjB,EAAY,SACf,SAAS,eAAe,cAAoC,MAC7D,IAEI,EAAS,SAAS,eAAe,UAEnC,EAAY,GAeZ,GAbA,MAAM,KACR,GAAa,kDAEX,MAAM,KACR,GAAa,kDAEX,MAAM,KACR,GAAa,mDAEX,MAAM,KACR,GAAa,0DAGG,KAAd,EAAkB,CACd,IACA,GADO,EAAQ,GAAS,EAAI,EACN,EAAc,EACpC,EACJ,KAAK,MAAgC,IAA1B,KAAK,IAAI,IAAyB,IAG7C,EAD2B,IAAzB,EACU,mDAEA,wBAAwB,EAAoB,KAC7C,aAAT,EAAsB,MAAM,EAAW,KAAK,IAAI,IAAe,IAAM,IAAE,IACrE,EAAI,KAAI,EAAgB,EAAI,YAAc,WAAS,aAI3D,QAAQ,IAAI,CAAE,MAAK,EAAE,MAAK,EAAE,aAAY,EAAE,YAAW,EAAE,UAAS,IAChE,EAAO,UAAY,EACnB,EAAO,cAAc,UAAU,OAAO","file":"src.2d842eb1.js","sourceRoot":"..","sourcesContent":["const calculate = document.getElementById(\"calculate\");\n\nconst toFraction = function (value: number, maxDivision = 128): string {\n  if (typeof value !== \"number\") {\n    throw new Error(`Cannot compute fraction of type ${typeof value}`);\n  }\n\n  let denominator = maxDivision;\n\n  const whole = Math.floor(value);\n  const decimal = value - whole;\n\n  if (decimal === 0) {\n    return `${whole}`;\n  }\n  let numerator = Math.round(decimal * denominator);\n\n  if (numerator === 0) {\n    while (numerator === 0) {\n      denominator = denominator * 2;\n      numerator = Math.round(decimal * denominator);\n    }\n  } else {\n    while (numerator % 2 === 0) {\n      numerator = numerator / 2;\n      denominator = denominator / 2;\n    }\n  }\n\n  return (whole > 0 ? ` ${whole} ` : \" \") + `${numerator}/${denominator}`;\n};\n\ncalculate.onclick = () => {\n  const unit = (document.getElementById(\"unit\") as HTMLSelectElement).value;\n  const aSide = (document.getElementById(\"a-side\") as HTMLInputElement)\n    .valueAsNumber;\n  const bSide = (document.getElementById(\"b-side\") as HTMLInputElement)\n    .valueAsNumber;\n  const offcutLength = (document.getElementById(\n    \"offcut-length\"\n  ) as HTMLInputElement).valueAsNumber;\n  const pivotLength = (document.getElementById(\n    \"pivot-length\"\n  ) as HTMLInputElement).valueAsNumber;\n  const pivotSide = parseInt(\n    (document.getElementById(\"pivot-side\") as HTMLSelectElement).value,\n    10\n  );\n  const result = document.getElementById(\"result\");\n\n  let resultMsg = \"\";\n\n  if (isNaN(aSide)) {\n    resultMsg += `Please enter a value for \"A Side Width\"<br/>\\n`;\n  }\n  if (isNaN(bSide)) {\n    resultMsg += `Please enter a value for \"B Side Width\"<br/>\\n`;\n  }\n  if (isNaN(offcutLength)) {\n    resultMsg += `Please enter a value for \"Offcut Length\"<br/>\\n`;\n  }\n  if (isNaN(pivotLength)) {\n    resultMsg += `Please enter a value for \"Pivot Screw Distance\"<br/>\\n`;\n  }\n\n  if (resultMsg === \"\") {\n    const epi = (aSide - bSide) / 4 / offcutLength;\n    const fenceMovement = epi * pivotLength * pivotSide;\n    const fenceMovementDisplay =\n      Math.round(Math.abs(fenceMovement) * 1000) / 1000;\n\n    if (fenceMovementDisplay === 0) {\n      resultMsg = `Your fence is perfectly square. Congratulations!`;\n    } else {\n      resultMsg = `Adjust your fence by ${fenceMovementDisplay} ${\n        unit === \"inch(es)\" ? `(â‰ˆ ${toFraction(Math.abs(fenceMovement))})` : \"\"\n      } ${unit} ${fenceMovement > 0 ? \"away from\" : \"towards\"} yourself.`;\n    }\n  }\n\n  console.log({ aSide, bSide, offcutLength, pivotLength, resultMsg });\n  result.innerHTML = resultMsg;\n  result.parentElement.classList.remove(\"hidden\");\n};\n"]}